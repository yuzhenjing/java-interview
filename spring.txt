getBean 方法代码逻辑

转换beanName
从缓存中加载实例
实例化Bean
检测parentBeanFactory
初始化依赖bean
创建bean

singleton spring的默认作用域 容器里拥有唯一的bean实例
prototype 针对每个getBean请求容器都会创建一个Bean实例频繁创建开销大


web环境下

request 会为每个http请求创建一个Bean实例

session 会为每个session创建一个Bean实例

globalSession 会为每个全局http session 创建一个Bean实例 该作用域仅对Portlet 有效


spring bean的生命周期

实例化bean---

spring aop
关注点分离 不同的问题交给不同的部分去解决

面向切面编程AOP正是此种技术的体现

通用化代码实现 对应的就是所谓的切面

业务功能代码

AOP的三种植入方式

编译时植入需要特殊的java编译器 如AspectJ

类加载时织入 需要特殊的java编译器 如AspectJ 和AspectWerkz

运行时织入 Spring采用的方式通过动态代理 实现简单


切面

切入点  切入的位置  @Pointcut("execution(* )")

切点


AOP主要名词

Aspect 通用功能的代码实现

Target 被织入Aspect的对象

Join Point 可以作为切入点的机会 所有方法都可以作为切入点

Pointcut Aspect实际被应用在Join Point,支持正则

Advice 这里的方法以及这个方法如何织入到目标方法的方式

Weaving AOP的实现过程

advice 种类

前置通知 Before
后置通知 AfterReturing
异常通知 AfterThroeing
最终通知 After
环绕通知 Around

AOP 的原理

Aop的实现  JdkProxy Cglib

     由AopProxyFactory 根据AdvisedSupport 对象的配置来决定
     默认策略如果目标类是接口 则用JDKProxy 来实现否则用后者
     JDKProxy的核心 InvovationHandler接口和Proxy类
     Cglib 以继承的方式动态生成目标类的代理
     JDKProxy 通过Java的内部反射机制实现
     Cglib 借助ASM实现

     反射机制在生成类的过程中比较高效
     ASM在生成类之后的执行过程中比较高效  （可缓存生成的类）

     代理模式 接口 +真实实现类+代理类
        代理类和被代理类实现共同的接口  代理类持有被代理类的引用对象
        
     
事务的隔离级别


 事务的传播


































